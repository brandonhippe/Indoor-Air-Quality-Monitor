# coding: utf-8

"""
APApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class APApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_aps(self, **kwargs):
        """
        Get list of AP motes and their states
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_aps(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start_index: Start index for the response elements
        :param int max_results: Maximum number of elements to return
        :return: APList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_index', 'max_results']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aps" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/aps'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'max_results' in params:
            query_params['maxResults'] = params['max_results']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='APList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_ap(self, mac, **kwargs):
        """
        Delete the AP mote specified by MAC address
        This command deletes the AP mote specified by MAC address from both the network and the manager's configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_ap(mac, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mac: MAC Address (required)
        :return: CallbackInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ap" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mac' is set
        if ('mac' not in params) or (params['mac'] is None):
            raise ValueError("Missing the required parameter `mac` when calling `delete_ap`")

        resource_path = '/aps/a/{mac}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'mac' in params:
            path_params['mac'] = params['mac']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CallbackInfo',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def decommission_ap(self, mac, **kwargs):
        """
        Decommission the AP mote specified by MAC address
        This command triggers the manager to prepare an AP mote (identified by its MAC address) for removal from the network. The network is reballanced to provide routing through alternate AP motes, essentially moving all data paths from this AP mote to others. A cmdFinished notification is generated when the manager has finished the process. After completion, the decommissioned AP mote will enter the decommissioned state, which means it is safe to power it down and physically  remove it from the network. Note that this is a best-effort command, and that in some cases it may not be possible to  find alternative routes for some motes.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.decommission_ap(mac, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mac: MAC Address (required)
        :return: CallbackInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method decommission_ap" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mac' is set
        if ('mac' not in params) or (params['mac'] is None):
            raise ValueError("Missing the required parameter `mac` when calling `decommission_ap`")

        resource_path = '/aps/a/{mac}/decommission'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'mac' in params:
            path_params['mac'] = params['mac']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CallbackInfo',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_ap_info(self, mac, **kwargs):
        """
        Get information about the AP mote specified by MAC address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ap_info(mac, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mac: MAC Address (required)
        :return: APInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ap_info" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mac' is set
        if ('mac' not in params) or (params['mac'] is None):
            raise ValueError("Missing the required parameter `mac` when calling `get_ap_info`")

        resource_path = '/aps/a/{mac}/info'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'mac' in params:
            path_params['mac'] = params['mac']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='APInfo',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def exchange_ap_join_key(self, mac, body, **kwargs):
        """
        Exchange join key to the AP mote specified by MAC address
        This command triggers the manager to send a new join key to the specified AP mote and update the manager's Access Control List (ACL) entry for the AP mote. The response contains a callbackId. A cmdFinished event notification with this callbackId will be sent when the operation is complete. This change is persistent.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.exchange_ap_join_key(mac, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mac: MAC Address (required)
        :param ExchangeKeyInfo body: New join key (required)
        :return: CallbackInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_ap_join_key" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mac' is set
        if ('mac' not in params) or (params['mac'] is None):
            raise ValueError("Missing the required parameter `mac` when calling `exchange_ap_join_key`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `exchange_ap_join_key`")

        resource_path = '/aps/a/{mac}/joinKey'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'mac' in params:
            path_params['mac'] = params['mac']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CallbackInfo',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_ap_links(self, mac, **kwargs):
        """
        Get all links currently active on the AP mote specified by MAC address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ap_links(mac, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mac: MAC Address (required)
        :param int start_index: Start index for the response elements
        :param int max_results: Maximum number of elements to return
        :return: LinkInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac', 'start_index', 'max_results']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ap_links" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mac' is set
        if ('mac' not in params) or (params['mac'] is None):
            raise ValueError("Missing the required parameter `mac` when calling `get_ap_links`")

        resource_path = '/aps/a/{mac}/links'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'mac' in params:
            path_params['mac'] = params['mac']

        query_params = {}
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'max_results' in params:
            query_params['maxResults'] = params['max_results']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='LinkInfoList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def ping_ap(self, mac, **kwargs):
        """
        Ping the AP mote specified by MAC address
        This command sends a ping (echo request) to the AP mote specified by MAC address A unique callbackId is generated and returned with the response. Note that, contrary to other commands, a cmdFinished notification is not generated as a result of this command.  Instead, when the response is received or a timeout occurs, the manager generates a pingResponse notification  containing the callbackId, measured round trip delay, and several other informational fields.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ping_ap(mac, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mac: MAC Address (required)
        :return: CallbackInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_ap" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mac' is set
        if ('mac' not in params) or (params['mac'] is None):
            raise ValueError("Missing the required parameter `mac` when calling `ping_ap`")

        resource_path = '/aps/a/{mac}/ping'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'mac' in params:
            path_params['mac'] = params['mac']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CallbackInfo',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def reset_ap(self, mac, **kwargs):
        """
        Send a reset command to the AP specified by MAC address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_ap(mac, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mac: MAC Address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_ap" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mac' is set
        if ('mac' not in params) or (params['mac'] is None):
            raise ValueError("Missing the required parameter `mac` when calling `reset_ap`")

        resource_path = '/aps/a/{mac}/reset'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'mac' in params:
            path_params['mac'] = params['mac']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
