# coding: utf-8

"""
DCLApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DCLApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_blacklist(self, **kwargs):
        """
        Get the currently active DCL (blacklist)
        Get the list of devices currently not allowed to join the network.  This list is used when the network security type is common_skey. The ACL  (whitelist) takes precedence over the DCL (blacklist), so if a device  is present on the ACL, it will be allowed to join.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_blacklist(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start_index: Start index for the response elements
        :param int max_results: Maximum number of elements to return
        :return: MACAddrList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_index', 'max_results']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blacklist" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/dcl'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'max_results' in params:
            query_params['maxResults'] = params['max_results']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='MACAddrList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_blacklist_config(self, **kwargs):
        """
        Get the stored DCL
        Returns contents of DCL in stored configuration. The DCL includes devices that are not allowed to join the network. For the currently active DCL, see the 'GET dcl' command.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_blacklist_config(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start_index: Start index for the response elements
        :param int max_results: Maximum number of elements to return
        :return: MACAddrList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_index', 'max_results']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blacklist_config" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/dcl/config'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'max_results' in params:
            query_params['maxResults'] = params['max_results']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='MACAddrList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_blacklist_config_element(self, mac, **kwargs):
        """
        Get a stored DCL entry
        Returns the contents of a DCL entry in the stored configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_blacklist_config_element(mac, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mac: MAC Address (required)
        :return: BlacklistReadInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blacklist_config_element" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mac' is set
        if ('mac' not in params) or (params['mac'] is None):
            raise ValueError("Missing the required parameter `mac` when calling `get_blacklist_config_element`")

        resource_path = '/dcl/config/{mac}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'mac' in params:
            path_params['mac'] = params['mac']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='BlacklistReadInfo',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_blacklist_config(self, mac, **kwargs):
        """
        Add an entry to the DCL
        Add an entry to the DCL in the stored configuration. The DCL contains  a list of devices not allowed to join the network.  Changes to the stored DCL do not change the currently active DCL until the next time that the manager starts up. However, the stored configuration can be forced to take effect by issuing  `POST /config/reload/dcl`, or by issuing `POST /network/reset` to  restart the network and including the `reload=true` parameter.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_blacklist_config(mac, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mac: MAC Address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_blacklist_config" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mac' is set
        if ('mac' not in params) or (params['mac'] is None):
            raise ValueError("Missing the required parameter `mac` when calling `create_blacklist_config`")

        resource_path = '/dcl/config/{mac}'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'mac' in params:
            path_params['mac'] = params['mac']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_blacklist_config(self, mac, **kwargs):
        """
        Deletes a device from the DCL
        Deletes a device from DCL in the stored configuration. Changes to the stored DCL do not change the currently active DCL until the next time that the manager starts up. However, the stored configuration can be forced to take effect by issuing  `POST /config/reload/dcl`, or by issuing `POST /network/reset` to  restart the network and including the `reload=true` parameter.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_blacklist_config(mac, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mac: MAC Address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_blacklist_config" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mac' is set
        if ('mac' not in params) or (params['mac'] is None):
            raise ValueError("Missing the required parameter `mac` when calling `delete_blacklist_config`")

        resource_path = '/dcl/config/{mac}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'mac' in params:
            path_params['mac'] = params['mac']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_blacklist_info(self, mac, **kwargs):
        """
        Get DCL entry
        null

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_blacklist_info(mac, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mac: MAC Address (required)
        :return: BlacklistReadInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blacklist_info" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mac' is set
        if ('mac' not in params) or (params['mac'] is None):
            raise ValueError("Missing the required parameter `mac` when calling `get_blacklist_info`")

        resource_path = '/dcl/d/{mac}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'mac' in params:
            path_params['mac'] = params['mac']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='BlacklistReadInfo',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
