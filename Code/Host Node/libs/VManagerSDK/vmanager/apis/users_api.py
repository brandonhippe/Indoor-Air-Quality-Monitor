# coding: utf-8

"""
UsersApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UsersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_users(self, **kwargs):
        """
        Get currently active list of API/CLI users
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_users(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start_index: Start index for the response elements
        :param int max_results: Maximum number of elements to return
        :return: UserList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_index', 'max_results']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/users'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'max_results' in params:
            query_params['maxResults'] = params['max_results']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='UserList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_config_users(self, **kwargs):
        """
        Get a list of users contained in stored configuration
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_config_users(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start_index: Start index for the response elements
        :param int max_results: Maximum number of elements to return
        :return: UserList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_index', 'max_results']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_config_users" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/users/config'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'max_results' in params:
            query_params['maxResults'] = params['max_results']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='UserList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_config_user(self, userid, **kwargs):
        """
        Get stored details about a particular user
        Returns stored details about a particular user. For security purposes, the reply never contains the user password.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_config_user(userid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userid: User id (required)
        :return: UserReadConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_config_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'userid' is set
        if ('userid' not in params) or (params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `get_config_user`")

        resource_path = '/users/config/{userid}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='UserReadConfig',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_config_user(self, userid, body, **kwargs):
        """
        Modify an existing user in stored configuration
        Modify an existing user in stored configuration. Note: a user (provided he has write privileges) can not change privilege of any user to value higher than its own. Also, a user can't modify another user that has a higher privilege. Note: Changes to stored configuration do not affect currently active settings until the next time the manager starts up. However, certain parameters can be forced to take effect at run-time by issuing POST config/reload or by resetting the network via POST network/reset and including the reload=true parameter.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_config_user(userid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userid: User id (required)
        :param UserWriteConfig body: User information (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_config_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'userid' is set
        if ('userid' not in params) or (params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `update_config_user`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_config_user`")

        resource_path = '/users/config/{userid}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def add_config_user(self, userid, body, **kwargs):
        """
        Add a new user to stored configuration
        Add a new user to stored configuration. Userid format: must begin with a letter or an underscore which can be followed by lower-case letters, digits, underscores, or dashes. User id is case-insensitive and can be up to 32 characters long (i.e., in regular expression terms, ^[a-z0-9_-]{1,32}$ ). Password can be a combination of any letters, numbers or symbols, up to 32 characters long. It is case sensitive. Notes: 1) A user (provided he has write privileges) can only create other users of same or lower privilege. 2) Changes to stored configuration do not affect currently active settings until the next time the manager starts up. However, certain parameters can be forced to take effect at run-time by issuing POST config/reload or by resetting the network via POST network/reset and including the reload=true parameter.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_config_user(userid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userid: User id (required)
        :param UserWriteConfig body: User information (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_config_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'userid' is set
        if ('userid' not in params) or (params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `add_config_user`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_config_user`")

        resource_path = '/users/config/{userid}'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_config_user(self, userid, **kwargs):
        """
        Delete a specified user from stored configuration
        Delete a specified user from stored configuration. Note 1: A user with write privileges can only delete another user with same or lower privilege level than its own. Read-only users may not delete other users. Note 2: Changes to user configuration do not change currently active users until next time that the manager starts up. However, certain parameters can be forced to take effect at run-time by issuing POST config/reload or POST config/reload/users commands.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_config_user(userid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userid: User id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_config_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'userid' is set
        if ('userid' not in params) or (params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `delete_config_user`")

        resource_path = '/users/config/{userid}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_user(self, userid, **kwargs):
        """
        Get details about a particular user
        Returns details about a particular user. For security purposes, the reply never contains the user password.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user(userid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userid: User id (required)
        :return: UserInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'userid' is set
        if ('userid' not in params) or (params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `get_user`")

        resource_path = '/users/u/{userid}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['dust_basic']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='UserInfo',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
