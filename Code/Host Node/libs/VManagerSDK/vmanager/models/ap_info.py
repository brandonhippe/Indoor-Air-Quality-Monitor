# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class APInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        APInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'app_sw_rev': 'str',
            'clk_src': 'str',
            'gps_status': 'str',
            'hw_model': 'int',
            'hw_rev': 'int',
            'id': 'int',
            'identity': 'str',
            'join_sys_time': 'datetime',
            'mac_address': 'str',
            'num_joins': 'int',
            'stack_sw_rev': 'str',
            'state': 'str',
            'state_reason': 'str',
            'state_sys_time': 'datetime'
        }

        self.attribute_map = {
            'app_sw_rev': 'appSwRev',
            'clk_src': 'clkSrc',
            'gps_status': 'gpsStatus',
            'hw_model': 'hwModel',
            'hw_rev': 'hwRev',
            'id': 'id',
            'identity': 'identity',
            'join_sys_time': 'joinSysTime',
            'mac_address': 'macAddress',
            'num_joins': 'numJoins',
            'stack_sw_rev': 'stackSwRev',
            'state': 'state',
            'state_reason': 'stateReason',
            'state_sys_time': 'stateSysTime'
        }

        self._app_sw_rev = None
        self._clk_src = None
        self._gps_status = None
        self._hw_model = None
        self._hw_rev = None
        self._id = None
        self._identity = None
        self._join_sys_time = None
        self._mac_address = None
        self._num_joins = None
        self._stack_sw_rev = None
        self._state = None
        self._state_reason = None
        self._state_sys_time = None

    @property
    def app_sw_rev(self):
        """
        Gets the app_sw_rev of this APInfo.
        Software version of the AP mote's application software

        :return: The app_sw_rev of this APInfo.
        :rtype: str
        """
        return self._app_sw_rev

    @app_sw_rev.setter
    def app_sw_rev(self, app_sw_rev):
        """
        Sets the app_sw_rev of this APInfo.
        Software version of the AP mote's application software

        :param app_sw_rev: The app_sw_rev of this APInfo.
        :type: str
        """
        self._app_sw_rev = app_sw_rev

    @property
    def clk_src(self):
        """
        Gets the clk_src of this APInfo.
        AP mote clock source

        :return: The clk_src of this APInfo.
        :rtype: str
        """
        return self._clk_src

    @clk_src.setter
    def clk_src(self, clk_src):
        """
        Sets the clk_src of this APInfo.
        AP mote clock source

        :param clk_src: The clk_src of this APInfo.
        :type: str
        """
        allowed_values = ["internal", "network", "pps"]
        if clk_src not in allowed_values:
            raise ValueError(
                "Invalid value for `clk_src`, must be one of {0}"
                .format(allowed_values)
            )
        self._clk_src = clk_src

    @property
    def gps_status(self):
        """
        Gets the gps_status of this APInfo.
        Status of connected GPS, if any

        :return: The gps_status of this APInfo.
        :rtype: str
        """
        return self._gps_status

    @gps_status.setter
    def gps_status(self, gps_status):
        """
        Sets the gps_status of this APInfo.
        Status of connected GPS, if any

        :param gps_status: The gps_status of this APInfo.
        :type: str
        """
        allowed_values = ["none", "synchronized", "unsynchronized"]
        if gps_status not in allowed_values:
            raise ValueError(
                "Invalid value for `gps_status`, must be one of {0}"
                .format(allowed_values)
            )
        self._gps_status = gps_status

    @property
    def hw_model(self):
        """
        Gets the hw_model of this APInfo.
        Hardware model of the AP mote

        :return: The hw_model of this APInfo.
        :rtype: int
        """
        return self._hw_model

    @hw_model.setter
    def hw_model(self, hw_model):
        """
        Sets the hw_model of this APInfo.
        Hardware model of the AP mote

        :param hw_model: The hw_model of this APInfo.
        :type: int
        """
        self._hw_model = hw_model

    @property
    def hw_rev(self):
        """
        Gets the hw_rev of this APInfo.
        Hardware revision of the AP mote

        :return: The hw_rev of this APInfo.
        :rtype: int
        """
        return self._hw_rev

    @hw_rev.setter
    def hw_rev(self, hw_rev):
        """
        Sets the hw_rev of this APInfo.
        Hardware revision of the AP mote

        :param hw_rev: The hw_rev of this APInfo.
        :type: int
        """
        self._hw_rev = hw_rev

    @property
    def id(self):
        """
        Gets the id of this APInfo.
        Numeric AP mote identifier, used as a shortcut on CLI. The id should not be used to uniquely identify an AP mote as it is not guaranteed to remain constant after an AP mote reset

        :return: The id of this APInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this APInfo.
        Numeric AP mote identifier, used as a shortcut on CLI. The id should not be used to uniquely identify an AP mote as it is not guaranteed to remain constant after an AP mote reset

        :param id: The id of this APInfo.
        :type: int
        """
        self._id = id

    @property
    def identity(self):
        """
        Gets the identity of this APInfo.
        User-provided identifier that describes the AP mote e.g. (\"serial APC /dev/ttyUSB0\").

        :return: The identity of this APInfo.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """
        Sets the identity of this APInfo.
        User-provided identifier that describes the AP mote e.g. (\"serial APC /dev/ttyUSB0\").

        :param identity: The identity of this APInfo.
        :type: str
        """
        self._identity = identity

    @property
    def join_sys_time(self):
        """
        Gets the join_sys_time of this APInfo.
        Time at which the AP mote last joined, in ISO 8601 format

        :return: The join_sys_time of this APInfo.
        :rtype: datetime
        """
        return self._join_sys_time

    @join_sys_time.setter
    def join_sys_time(self, join_sys_time):
        """
        Sets the join_sys_time of this APInfo.
        Time at which the AP mote last joined, in ISO 8601 format

        :param join_sys_time: The join_sys_time of this APInfo.
        :type: datetime
        """
        self._join_sys_time = join_sys_time

    @property
    def mac_address(self):
        """
        Gets the mac_address of this APInfo.
        AP mote's MAC address. The MAC address is a unique identifier of the AP mote

        :return: The mac_address of this APInfo.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this APInfo.
        AP mote's MAC address. The MAC address is a unique identifier of the AP mote

        :param mac_address: The mac_address of this APInfo.
        :type: str
        """
        self._mac_address = mac_address

    @property
    def num_joins(self):
        """
        Gets the num_joins of this APInfo.
        Total number of times the AP mote has joined the manager

        :return: The num_joins of this APInfo.
        :rtype: int
        """
        return self._num_joins

    @num_joins.setter
    def num_joins(self, num_joins):
        """
        Sets the num_joins of this APInfo.
        Total number of times the AP mote has joined the manager

        :param num_joins: The num_joins of this APInfo.
        :type: int
        """
        self._num_joins = num_joins

    @property
    def stack_sw_rev(self):
        """
        Gets the stack_sw_rev of this APInfo.
        Software version of the AP mote's network stack

        :return: The stack_sw_rev of this APInfo.
        :rtype: str
        """
        return self._stack_sw_rev

    @stack_sw_rev.setter
    def stack_sw_rev(self, stack_sw_rev):
        """
        Sets the stack_sw_rev of this APInfo.
        Software version of the AP mote's network stack

        :param stack_sw_rev: The stack_sw_rev of this APInfo.
        :type: str
        """
        self._stack_sw_rev = stack_sw_rev

    @property
    def state(self):
        """
        Gets the state of this APInfo.
        Access Point state

        :return: The state of this APInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this APInfo.
        Access Point state

        :param state: The state of this APInfo.
        :type: str
        """
        allowed_values = ["lost", "negotiating", "connected", "operational", "decommissioned"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state`, must be one of {0}"
                .format(allowed_values)
            )
        self._state = state

    @property
    def state_reason(self):
        """
        Gets the state_reason of this APInfo.
        Indicates why the AP mote is in its current state. Nothing is returned if the AP mote is negotiating or operational

        :return: The state_reason of this APInfo.
        :rtype: str
        """
        return self._state_reason

    @state_reason.setter
    def state_reason(self, state_reason):
        """
        Sets the state_reason of this APInfo.
        Indicates why the AP mote is in its current state. Nothing is returned if the AP mote is negotiating or operational

        :param state_reason: The state_reason of this APInfo.
        :type: str
        """
        allowed_values = ["", "none", "rejoined", "globalCmd", "initialization", "unreachable", "transport", "rcError", "unexpected", "forced", "disconnect", "apLost", "clkSrc", "gpsNotSynced"]
        if state_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `state_reason`, must be one of {0}"
                .format(allowed_values)
            )
        self._state_reason = state_reason

    @property
    def state_sys_time(self):
        """
        Gets the state_sys_time of this APInfo.
        Time of last state change, in ISO 8601 format

        :return: The state_sys_time of this APInfo.
        :rtype: datetime
        """
        return self._state_sys_time

    @state_sys_time.setter
    def state_sys_time(self, state_sys_time):
        """
        Sets the state_sys_time of this APInfo.
        Time of last state change, in ISO 8601 format

        :param state_sys_time: The state_sys_time of this APInfo.
        :type: datetime
        """
        self._state_sys_time = state_sys_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

