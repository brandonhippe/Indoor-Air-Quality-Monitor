# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DeviceHealthReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DeviceHealthReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'num_mac_crc_err': 'int',
            'bad_link_failures': 'int',
            'bad_link_frame_id': 'int',
            'bad_link_offset': 'int',
            'num_rx_drop': 'int',
            'mac_address': 'str',
            'num_tx_fail': 'int',
            'avg_queue': 'int',
            'type': 'str',
            'num_rx_ok': 'int',
            'temperature': 'int',
            'sys_time': 'datetime',
            'num_tx_ok': 'int',
            'num_net_mic_err': 'int',
            'charge': 'int',
            'voltage': 'int',
            'bad_link_slot': 'int',
            'num_mac_mic_err': 'int',
            'num_mac_drop': 'int',
            'max_queue': 'int'
        }

        self.attribute_map = {
            'num_mac_crc_err': 'numMacCrcErr',
            'bad_link_failures': 'badLinkFailures',
            'bad_link_frame_id': 'badLinkFrameId',
            'bad_link_offset': 'badLinkOffset',
            'num_rx_drop': 'numRxDrop',
            'mac_address': 'macAddress',
            'num_tx_fail': 'numTxFail',
            'avg_queue': 'avgQueue',
            'type': 'type',
            'num_rx_ok': 'numRxOk',
            'temperature': 'temperature',
            'sys_time': 'sysTime',
            'num_tx_ok': 'numTxOk',
            'num_net_mic_err': 'numNetMicErr',
            'charge': 'charge',
            'voltage': 'voltage',
            'bad_link_slot': 'badLinkSlot',
            'num_mac_mic_err': 'numMacMicErr',
            'num_mac_drop': 'numMacDrop',
            'max_queue': 'maxQueue'
        }

        self._num_mac_crc_err = None
        self._bad_link_failures = None
        self._bad_link_frame_id = None
        self._bad_link_offset = None
        self._num_rx_drop = None
        self._mac_address = None
        self._num_tx_fail = None
        self._avg_queue = None
        self._type = None
        self._num_rx_ok = None
        self._temperature = None
        self._sys_time = None
        self._num_tx_ok = None
        self._num_net_mic_err = None
        self._charge = None
        self._voltage = None
        self._bad_link_slot = None
        self._num_mac_mic_err = None
        self._num_mac_drop = None
        self._max_queue = None

    @property
    def num_mac_crc_err(self):
        """
        Gets the num_mac_crc_err of this DeviceHealthReport.
        Number of incoming packets with MAC-layer CRC errors. Mote versions prior to 1.4 will not report this field, the value defaults to 0.

        :return: The num_mac_crc_err of this DeviceHealthReport.
        :rtype: int
        """
        return self._num_mac_crc_err

    @num_mac_crc_err.setter
    def num_mac_crc_err(self, num_mac_crc_err):
        """
        Sets the num_mac_crc_err of this DeviceHealthReport.
        Number of incoming packets with MAC-layer CRC errors. Mote versions prior to 1.4 will not report this field, the value defaults to 0.

        :param num_mac_crc_err: The num_mac_crc_err of this DeviceHealthReport.
        :type: int
        """
        self._num_mac_crc_err = num_mac_crc_err

    @property
    def bad_link_failures(self):
        """
        Gets the bad_link_failures of this DeviceHealthReport.
        Number of tx failures for the bad link reported

        :return: The bad_link_failures of this DeviceHealthReport.
        :rtype: int
        """
        return self._bad_link_failures

    @bad_link_failures.setter
    def bad_link_failures(self, bad_link_failures):
        """
        Sets the bad_link_failures of this DeviceHealthReport.
        Number of tx failures for the bad link reported

        :param bad_link_failures: The bad_link_failures of this DeviceHealthReport.
        :type: int
        """
        self._bad_link_failures = bad_link_failures

    @property
    def bad_link_frame_id(self):
        """
        Gets the bad_link_frame_id of this DeviceHealthReport.
        Frame id of the reported bad link

        :return: The bad_link_frame_id of this DeviceHealthReport.
        :rtype: int
        """
        return self._bad_link_frame_id

    @bad_link_frame_id.setter
    def bad_link_frame_id(self, bad_link_frame_id):
        """
        Sets the bad_link_frame_id of this DeviceHealthReport.
        Frame id of the reported bad link

        :param bad_link_frame_id: The bad_link_frame_id of this DeviceHealthReport.
        :type: int
        """
        self._bad_link_frame_id = bad_link_frame_id

    @property
    def bad_link_offset(self):
        """
        Gets the bad_link_offset of this DeviceHealthReport.
        Offset number of the reported bad link

        :return: The bad_link_offset of this DeviceHealthReport.
        :rtype: int
        """
        return self._bad_link_offset

    @bad_link_offset.setter
    def bad_link_offset(self, bad_link_offset):
        """
        Sets the bad_link_offset of this DeviceHealthReport.
        Offset number of the reported bad link

        :param bad_link_offset: The bad_link_offset of this DeviceHealthReport.
        :type: int
        """
        self._bad_link_offset = bad_link_offset

    @property
    def num_rx_drop(self):
        """
        Gets the num_rx_drop of this DeviceHealthReport.
        Number of packet discarded in NET layer due to misc. errors in mesh/IP/UDP/transport/security/cmd

        :return: The num_rx_drop of this DeviceHealthReport.
        :rtype: int
        """
        return self._num_rx_drop

    @num_rx_drop.setter
    def num_rx_drop(self, num_rx_drop):
        """
        Sets the num_rx_drop of this DeviceHealthReport.
        Number of packet discarded in NET layer due to misc. errors in mesh/IP/UDP/transport/security/cmd

        :param num_rx_drop: The num_rx_drop of this DeviceHealthReport.
        :type: int
        """
        self._num_rx_drop = num_rx_drop

    @property
    def mac_address(self):
        """
        Gets the mac_address of this DeviceHealthReport.
        MAC address of the device that sent this health report

        :return: The mac_address of this DeviceHealthReport.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this DeviceHealthReport.
        MAC address of the device that sent this health report

        :param mac_address: The mac_address of this DeviceHealthReport.
        :type: str
        """
        self._mac_address = mac_address

    @property
    def num_tx_fail(self):
        """
        Gets the num_tx_fail of this DeviceHealthReport.
        Number of packets not sent due to congestion and failure to allocate a packet during last interval

        :return: The num_tx_fail of this DeviceHealthReport.
        :rtype: int
        """
        return self._num_tx_fail

    @num_tx_fail.setter
    def num_tx_fail(self, num_tx_fail):
        """
        Sets the num_tx_fail of this DeviceHealthReport.
        Number of packets not sent due to congestion and failure to allocate a packet during last interval

        :param num_tx_fail: The num_tx_fail of this DeviceHealthReport.
        :type: int
        """
        self._num_tx_fail = num_tx_fail

    @property
    def avg_queue(self):
        """
        Gets the avg_queue of this DeviceHealthReport.
        Average queue occupancy during this report's interval

        :return: The avg_queue of this DeviceHealthReport.
        :rtype: int
        """
        return self._avg_queue

    @avg_queue.setter
    def avg_queue(self, avg_queue):
        """
        Sets the avg_queue of this DeviceHealthReport.
        Average queue occupancy during this report's interval

        :param avg_queue: The avg_queue of this DeviceHealthReport.
        :type: int
        """
        self._avg_queue = avg_queue

    @property
    def type(self):
        """
        Gets the type of this DeviceHealthReport.
        Notification type

        :return: The type of this DeviceHealthReport.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this DeviceHealthReport.
        Notification type

        :param type: The type of this DeviceHealthReport.
        :type: str
        """
        allowed_values = ["netStarted", "pathStateChanged", "pathAlert", "moteStateChanged", "joinFailed", "pingResponse", "invalidMIC", "dataPacketReceived", "ipPacketReceived", "packetSent", "cmdFinished", "configChanged", "configLoaded", "alarmOpened", "alarmClosed", "deviceHealthReport", "neighborHealthReport", "discoveryHealthReport", "rawMoteNotification", "serviceChanged", "apStateChanged", "managerStarted", "managerStopping", "optPhase", "pathAlert", "moteTrace", "frameCapacity", "apGpsSyncChanged"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def num_rx_ok(self):
        """
        Gets the num_rx_ok of this DeviceHealthReport.
        Number of received packets during last interval

        :return: The num_rx_ok of this DeviceHealthReport.
        :rtype: int
        """
        return self._num_rx_ok

    @num_rx_ok.setter
    def num_rx_ok(self, num_rx_ok):
        """
        Sets the num_rx_ok of this DeviceHealthReport.
        Number of received packets during last interval

        :param num_rx_ok: The num_rx_ok of this DeviceHealthReport.
        :type: int
        """
        self._num_rx_ok = num_rx_ok

    @property
    def temperature(self):
        """
        Gets the temperature of this DeviceHealthReport.
        Last measured temperature (to nearest °C)

        :return: The temperature of this DeviceHealthReport.
        :rtype: int
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """
        Sets the temperature of this DeviceHealthReport.
        Last measured temperature (to nearest °C)

        :param temperature: The temperature of this DeviceHealthReport.
        :type: int
        """
        self._temperature = temperature

    @property
    def sys_time(self):
        """
        Gets the sys_time of this DeviceHealthReport.
        Time of notification

        :return: The sys_time of this DeviceHealthReport.
        :rtype: datetime
        """
        return self._sys_time

    @sys_time.setter
    def sys_time(self, sys_time):
        """
        Sets the sys_time of this DeviceHealthReport.
        Time of notification

        :param sys_time: The sys_time of this DeviceHealthReport.
        :type: datetime
        """
        self._sys_time = sys_time

    @property
    def num_tx_ok(self):
        """
        Gets the num_tx_ok of this DeviceHealthReport.
        Number of packets sent from NET layer to MAC during last interval

        :return: The num_tx_ok of this DeviceHealthReport.
        :rtype: int
        """
        return self._num_tx_ok

    @num_tx_ok.setter
    def num_tx_ok(self, num_tx_ok):
        """
        Sets the num_tx_ok of this DeviceHealthReport.
        Number of packets sent from NET layer to MAC during last interval

        :param num_tx_ok: The num_tx_ok of this DeviceHealthReport.
        :type: int
        """
        self._num_tx_ok = num_tx_ok

    @property
    def num_net_mic_err(self):
        """
        Gets the num_net_mic_err of this DeviceHealthReport.
        Number of incoming packets terminated by this mote that fail decryption. Mote versions prior to 1.4 will not report this field, the value defaults to 0.

        :return: The num_net_mic_err of this DeviceHealthReport.
        :rtype: int
        """
        return self._num_net_mic_err

    @num_net_mic_err.setter
    def num_net_mic_err(self, num_net_mic_err):
        """
        Sets the num_net_mic_err of this DeviceHealthReport.
        Number of incoming packets terminated by this mote that fail decryption. Mote versions prior to 1.4 will not report this field, the value defaults to 0.

        :param num_net_mic_err: The num_net_mic_err of this DeviceHealthReport.
        :type: int
        """
        self._num_net_mic_err = num_net_mic_err

    @property
    def charge(self):
        """
        Gets the charge of this DeviceHealthReport.
        Accumulated lifetime charge consumption (mC)

        :return: The charge of this DeviceHealthReport.
        :rtype: int
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """
        Sets the charge of this DeviceHealthReport.
        Accumulated lifetime charge consumption (mC)

        :param charge: The charge of this DeviceHealthReport.
        :type: int
        """
        self._charge = charge

    @property
    def voltage(self):
        """
        Gets the voltage of this DeviceHealthReport.
        Last measured voltage (in mV)

        :return: The voltage of this DeviceHealthReport.
        :rtype: int
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """
        Sets the voltage of this DeviceHealthReport.
        Last measured voltage (in mV)

        :param voltage: The voltage of this DeviceHealthReport.
        :type: int
        """
        self._voltage = voltage

    @property
    def bad_link_slot(self):
        """
        Gets the bad_link_slot of this DeviceHealthReport.
        Slot number of the reported bad link

        :return: The bad_link_slot of this DeviceHealthReport.
        :rtype: int
        """
        return self._bad_link_slot

    @bad_link_slot.setter
    def bad_link_slot(self, bad_link_slot):
        """
        Sets the bad_link_slot of this DeviceHealthReport.
        Slot number of the reported bad link

        :param bad_link_slot: The bad_link_slot of this DeviceHealthReport.
        :type: int
        """
        self._bad_link_slot = bad_link_slot

    @property
    def num_mac_mic_err(self):
        """
        Gets the num_mac_mic_err of this DeviceHealthReport.
        Number of incoming packets that fail authentication. Mote versions prior to 1.4 will not report this field, the value defaults to 0.

        :return: The num_mac_mic_err of this DeviceHealthReport.
        :rtype: int
        """
        return self._num_mac_mic_err

    @num_mac_mic_err.setter
    def num_mac_mic_err(self, num_mac_mic_err):
        """
        Sets the num_mac_mic_err of this DeviceHealthReport.
        Number of incoming packets that fail authentication. Mote versions prior to 1.4 will not report this field, the value defaults to 0.

        :param num_mac_mic_err: The num_mac_mic_err of this DeviceHealthReport.
        :type: int
        """
        self._num_mac_mic_err = num_mac_mic_err

    @property
    def num_mac_drop(self):
        """
        Gets the num_mac_drop of this DeviceHealthReport.
        Number of packets dropped in MAC layer due to retry count, PDU age or no route

        :return: The num_mac_drop of this DeviceHealthReport.
        :rtype: int
        """
        return self._num_mac_drop

    @num_mac_drop.setter
    def num_mac_drop(self, num_mac_drop):
        """
        Sets the num_mac_drop of this DeviceHealthReport.
        Number of packets dropped in MAC layer due to retry count, PDU age or no route

        :param num_mac_drop: The num_mac_drop of this DeviceHealthReport.
        :type: int
        """
        self._num_mac_drop = num_mac_drop

    @property
    def max_queue(self):
        """
        Gets the max_queue of this DeviceHealthReport.
        Max queue occupancy during this report's interval

        :return: The max_queue of this DeviceHealthReport.
        :rtype: int
        """
        return self._max_queue

    @max_queue.setter
    def max_queue(self, max_queue):
        """
        Sets the max_queue of this DeviceHealthReport.
        Max queue occupancy during this report's interval

        :param max_queue: The max_queue of this DeviceHealthReport.
        :type: int
        """
        self._max_queue = max_queue

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

