# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class IPPacketSendInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IPPacketSendInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'encryption_offset': 'int',
            'payload': 'bytearray',
            'priority': 'str'
        }

        self.attribute_map = {
            'encryption_offset': 'encryptionOffset',
            'payload': 'payload',
            'priority': 'priority'
        }

        self._encryption_offset = None
        self._payload = None
        self._priority = None

    @property
    def encryption_offset(self):
        """
        Gets the encryption_offset of this IPPacketSendInfo.
        0-based offset at which the manager should encrypt the payload. Encryption should start at  the first byte of data, past all Header Compression fields. Note: authentication is always  enabled for the entire payload.

        :return: The encryption_offset of this IPPacketSendInfo.
        :rtype: int
        """
        return self._encryption_offset

    @encryption_offset.setter
    def encryption_offset(self, encryption_offset):
        """
        Sets the encryption_offset of this IPPacketSendInfo.
        0-based offset at which the manager should encrypt the payload. Encryption should start at  the first byte of data, past all Header Compression fields. Note: authentication is always  enabled for the entire payload.

        :param encryption_offset: The encryption_offset of this IPPacketSendInfo.
        :type: int
        """
        self._encryption_offset = encryption_offset

    @property
    def payload(self):
        """
        Gets the payload of this IPPacketSendInfo.
        Packet payload, in base64 format

        :return: The payload of this IPPacketSendInfo.
        :rtype: bytearray
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """
        Sets the payload of this IPPacketSendInfo.
        Packet payload, in base64 format

        :param payload: The payload of this IPPacketSendInfo.
        :type: bytearray
        """
        self._payload = payload

    @property
    def priority(self):
        """
        Gets the priority of this IPPacketSendInfo.
        Packet priority

        :return: The priority of this IPPacketSendInfo.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this IPPacketSendInfo.
        Packet priority

        :param priority: The priority of this IPPacketSendInfo.
        :type: str
        """
        allowed_values = ["low", "medium", "high"]
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority`, must be one of {0}"
                .format(allowed_values)
            )
        self._priority = priority

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

