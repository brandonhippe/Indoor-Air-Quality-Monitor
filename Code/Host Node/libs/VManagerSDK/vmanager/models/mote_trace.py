# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class MoteTrace(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        MoteTrace - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_time': 'datetime',
            'trace_type': 'str',
            'payload': 'bytearray',
            'mac_address': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'sys_time': 'sysTime',
            'trace_type': 'traceType',
            'payload': 'payload',
            'mac_address': 'macAddress',
            'type': 'type'
        }

        self._sys_time = None
        self._trace_type = None
        self._payload = None
        self._mac_address = None
        self._type = None

    @property
    def sys_time(self):
        """
        Gets the sys_time of this MoteTrace.
        Time of notification

        :return: The sys_time of this MoteTrace.
        :rtype: datetime
        """
        return self._sys_time

    @sys_time.setter
    def sys_time(self, sys_time):
        """
        Sets the sys_time of this MoteTrace.
        Time of notification

        :param sys_time: The sys_time of this MoteTrace.
        :type: datetime
        """
        self._sys_time = sys_time

    @property
    def trace_type(self):
        """
        Gets the trace_type of this MoteTrace.
        Type of trace notification

        :return: The trace_type of this MoteTrace.
        :rtype: str
        """
        return self._trace_type

    @trace_type.setter
    def trace_type(self, trace_type):
        """
        Sets the trace_type of this MoteTrace.
        Type of trace notification

        :param trace_type: The trace_type of this MoteTrace.
        :type: str
        """
        allowed_values = ["cli", "log"]
        if trace_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trace_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._trace_type = trace_type

    @property
    def payload(self):
        """
        Gets the payload of this MoteTrace.
        Payload of the notification

        :return: The payload of this MoteTrace.
        :rtype: bytearray
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """
        Sets the payload of this MoteTrace.
        Payload of the notification

        :param payload: The payload of this MoteTrace.
        :type: bytearray
        """
        self._payload = payload

    @property
    def mac_address(self):
        """
        Gets the mac_address of this MoteTrace.
        MAC address of the device that sent this trace message

        :return: The mac_address of this MoteTrace.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this MoteTrace.
        MAC address of the device that sent this trace message

        :param mac_address: The mac_address of this MoteTrace.
        :type: str
        """
        self._mac_address = mac_address

    @property
    def type(self):
        """
        Gets the type of this MoteTrace.
        Notification type

        :return: The type of this MoteTrace.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this MoteTrace.
        Notification type

        :param type: The type of this MoteTrace.
        :type: str
        """
        allowed_values = ["netStarted", "pathStateChanged", "pathAlert", "moteStateChanged", "joinFailed", "pingResponse", "invalidMIC", "dataPacketReceived", "ipPacketReceived", "packetSent", "cmdFinished", "configChanged", "configLoaded", "alarmOpened", "alarmClosed", "deviceHealthReport", "neighborHealthReport", "discoveryHealthReport", "rawMoteNotification", "serviceChanged", "apStateChanged", "managerStarted", "managerStopping", "optPhase", "pathAlert", "moteTrace", "frameCapacity", "apGpsSyncChanged"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

