# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class NetworkInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NetworkInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'adv_state': 'str',
            'cur_down_frame_size': 'int',
            'cur_net_time': 'datetime',
            'cur_sys_time': 'datetime',
            'latency': 'int',
            'lost_packet_count': 'int',
            'net_queue_size': 'int',
            'net_start_sys_time': 'datetime',
            'num_motes': 'int',
            'path_stability': 'float',
            'reliability': 'float',
            'reuse_mode': 'str',
            'rx_packet_count': 'int',
            'user_queue_size': 'int'
        }

        self.attribute_map = {
            'adv_state': 'advState',
            'cur_down_frame_size': 'curDownFrameSize',
            'cur_net_time': 'curNetTime',
            'cur_sys_time': 'curSysTime',
            'latency': 'latency',
            'lost_packet_count': 'lostPacketCount',
            'net_queue_size': 'netQueueSize',
            'net_start_sys_time': 'netStartSysTime',
            'num_motes': 'numMotes',
            'path_stability': 'pathStability',
            'reliability': 'reliability',
            'reuse_mode': 'reuseMode',
            'rx_packet_count': 'rxPacketCount',
            'user_queue_size': 'userQueueSize'
        }

        self._adv_state = None
        self._cur_down_frame_size = None
        self._cur_net_time = None
        self._cur_sys_time = None
        self._latency = None
        self._lost_packet_count = None
        self._net_queue_size = None
        self._net_start_sys_time = None
        self._num_motes = None
        self._path_stability = None
        self._reliability = None
        self._reuse_mode = None
        self._rx_packet_count = None
        self._user_queue_size = None

    @property
    def adv_state(self):
        """
        Gets the adv_state of this NetworkInfo.
        State of network advertising

        :return: The adv_state of this NetworkInfo.
        :rtype: str
        """
        return self._adv_state

    @adv_state.setter
    def adv_state(self, adv_state):
        """
        Sets the adv_state of this NetworkInfo.
        State of network advertising

        :param adv_state: The adv_state of this NetworkInfo.
        :type: str
        """
        allowed_values = ["off", "on"]
        if adv_state not in allowed_values:
            raise ValueError(
                "Invalid value for `adv_state`, must be one of {0}"
                .format(allowed_values)
            )
        self._adv_state = adv_state

    @property
    def cur_down_frame_size(self):
        """
        Gets the cur_down_frame_size of this NetworkInfo.
        Current downstream frame size (in number of timeslots)

        :return: The cur_down_frame_size of this NetworkInfo.
        :rtype: int
        """
        return self._cur_down_frame_size

    @cur_down_frame_size.setter
    def cur_down_frame_size(self, cur_down_frame_size):
        """
        Sets the cur_down_frame_size of this NetworkInfo.
        Current downstream frame size (in number of timeslots)

        :param cur_down_frame_size: The cur_down_frame_size of this NetworkInfo.
        :type: int
        """
        self._cur_down_frame_size = cur_down_frame_size

    @property
    def cur_net_time(self):
        """
        Gets the cur_net_time of this NetworkInfo.
        Current network time

        :return: The cur_net_time of this NetworkInfo.
        :rtype: datetime
        """
        return self._cur_net_time

    @cur_net_time.setter
    def cur_net_time(self, cur_net_time):
        """
        Sets the cur_net_time of this NetworkInfo.
        Current network time

        :param cur_net_time: The cur_net_time of this NetworkInfo.
        :type: datetime
        """
        self._cur_net_time = cur_net_time

    @property
    def cur_sys_time(self):
        """
        Gets the cur_sys_time of this NetworkInfo.
        Current system time

        :return: The cur_sys_time of this NetworkInfo.
        :rtype: datetime
        """
        return self._cur_sys_time

    @cur_sys_time.setter
    def cur_sys_time(self, cur_sys_time):
        """
        Sets the cur_sys_time of this NetworkInfo.
        Current system time

        :param cur_sys_time: The cur_sys_time of this NetworkInfo.
        :type: datetime
        """
        self._cur_sys_time = cur_sys_time

    @property
    def latency(self):
        """
        Gets the latency of this NetworkInfo.
        Average network latency, in milliseconds*

        :return: The latency of this NetworkInfo.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """
        Sets the latency of this NetworkInfo.
        Average network latency, in milliseconds*

        :param latency: The latency of this NetworkInfo.
        :type: int
        """
        self._latency = latency

    @property
    def lost_packet_count(self):
        """
        Gets the lost_packet_count of this NetworkInfo.
        Number of lost packets accumulated over all motes*

        :return: The lost_packet_count of this NetworkInfo.
        :rtype: int
        """
        return self._lost_packet_count

    @lost_packet_count.setter
    def lost_packet_count(self, lost_packet_count):
        """
        Sets the lost_packet_count of this NetworkInfo.
        Number of lost packets accumulated over all motes*

        :param lost_packet_count: The lost_packet_count of this NetworkInfo.
        :type: int
        """
        self._lost_packet_count = lost_packet_count

    @property
    def net_queue_size(self):
        """
        Gets the net_queue_size of this NetworkInfo.
        Number of outstanding network management commands queued up to the network

        :return: The net_queue_size of this NetworkInfo.
        :rtype: int
        """
        return self._net_queue_size

    @net_queue_size.setter
    def net_queue_size(self, net_queue_size):
        """
        Sets the net_queue_size of this NetworkInfo.
        Number of outstanding network management commands queued up to the network

        :param net_queue_size: The net_queue_size of this NetworkInfo.
        :type: int
        """
        self._net_queue_size = net_queue_size

    @property
    def net_start_sys_time(self):
        """
        Gets the net_start_sys_time of this NetworkInfo.
        Time at which the first AP mote joined the manager, in ISO-8601 format. This value is reset every time the number of connected AP motes goes from zero to one

        :return: The net_start_sys_time of this NetworkInfo.
        :rtype: datetime
        """
        return self._net_start_sys_time

    @net_start_sys_time.setter
    def net_start_sys_time(self, net_start_sys_time):
        """
        Sets the net_start_sys_time of this NetworkInfo.
        Time at which the first AP mote joined the manager, in ISO-8601 format. This value is reset every time the number of connected AP motes goes from zero to one

        :param net_start_sys_time: The net_start_sys_time of this NetworkInfo.
        :type: datetime
        """
        self._net_start_sys_time = net_start_sys_time

    @property
    def num_motes(self):
        """
        Gets the num_motes of this NetworkInfo.
        Number of motes in the network

        :return: The num_motes of this NetworkInfo.
        :rtype: int
        """
        return self._num_motes

    @num_motes.setter
    def num_motes(self, num_motes):
        """
        Sets the num_motes of this NetworkInfo.
        Number of motes in the network

        :param num_motes: The num_motes of this NetworkInfo.
        :type: int
        """
        self._num_motes = num_motes

    @property
    def path_stability(self):
        """
        Gets the path_stability of this NetworkInfo.
        Accumulated path stability, % of unicast packets that were transmitted and resulted in a correctly received ACK at the MAC layer. A negative value means not enough data has been collected.*

        :return: The path_stability of this NetworkInfo.
        :rtype: float
        """
        return self._path_stability

    @path_stability.setter
    def path_stability(self, path_stability):
        """
        Sets the path_stability of this NetworkInfo.
        Accumulated path stability, % of unicast packets that were transmitted and resulted in a correctly received ACK at the MAC layer. A negative value means not enough data has been collected.*

        :param path_stability: The path_stability of this NetworkInfo.
        :type: float
        """
        self._path_stability = path_stability

    @property
    def reliability(self):
        """
        Gets the reliability of this NetworkInfo.
        Accumulated network reliability, % of packets received from all motes. A negative value means not enough data has been collected.*

        :return: The reliability of this NetworkInfo.
        :rtype: float
        """
        return self._reliability

    @reliability.setter
    def reliability(self, reliability):
        """
        Sets the reliability of this NetworkInfo.
        Accumulated network reliability, % of packets received from all motes. A negative value means not enough data has been collected.*

        :param reliability: The reliability of this NetworkInfo.
        :type: float
        """
        self._reliability = reliability

    @property
    def reuse_mode(self):
        """
        Gets the reuse_mode of this NetworkInfo.
        Cell space reuse mode

        :return: The reuse_mode of this NetworkInfo.
        :rtype: str
        """
        return self._reuse_mode

    @reuse_mode.setter
    def reuse_mode(self, reuse_mode):
        """
        Sets the reuse_mode of this NetworkInfo.
        Cell space reuse mode

        :param reuse_mode: The reuse_mode of this NetworkInfo.
        :type: str
        """
        allowed_values = ["N/A", "none", "upstream", "all"]
        if reuse_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `reuse_mode`, must be one of {0}"
                .format(allowed_values)
            )
        self._reuse_mode = reuse_mode

    @property
    def rx_packet_count(self):
        """
        Gets the rx_packet_count of this NetworkInfo.
        Number of packets received accumulated over all motes*

        :return: The rx_packet_count of this NetworkInfo.
        :rtype: int
        """
        return self._rx_packet_count

    @rx_packet_count.setter
    def rx_packet_count(self, rx_packet_count):
        """
        Sets the rx_packet_count of this NetworkInfo.
        Number of packets received accumulated over all motes*

        :param rx_packet_count: The rx_packet_count of this NetworkInfo.
        :type: int
        """
        self._rx_packet_count = rx_packet_count

    @property
    def user_queue_size(self):
        """
        Gets the user_queue_size of this NetworkInfo.
        Number of user packets in the queue

        :return: The user_queue_size of this NetworkInfo.
        :rtype: int
        """
        return self._user_queue_size

    @user_queue_size.setter
    def user_queue_size(self, user_queue_size):
        """
        Sets the user_queue_size of this NetworkInfo.
        Number of user packets in the queue

        :param user_queue_size: The user_queue_size of this NetworkInfo.
        :type: int
        """
        self._user_queue_size = user_queue_size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

