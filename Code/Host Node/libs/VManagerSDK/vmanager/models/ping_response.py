# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PingResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PingResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_time': 'datetime',
            'result': 'str',
            'latency': 'int',
            'hop_count': 'int',
            'voltage': 'float',
            'callback_id': 'int',
            'mac_address': 'str',
            'type': 'str',
            'temperature': 'int'
        }

        self.attribute_map = {
            'sys_time': 'sysTime',
            'result': 'result',
            'latency': 'latency',
            'hop_count': 'hopCount',
            'voltage': 'voltage',
            'callback_id': 'callbackId',
            'mac_address': 'macAddress',
            'type': 'type',
            'temperature': 'temperature'
        }

        self._sys_time = None
        self._result = None
        self._latency = None
        self._hop_count = None
        self._voltage = None
        self._callback_id = None
        self._mac_address = None
        self._type = None
        self._temperature = None

    @property
    def sys_time(self):
        """
        Gets the sys_time of this PingResponse.
        Time of notification

        :return: The sys_time of this PingResponse.
        :rtype: datetime
        """
        return self._sys_time

    @sys_time.setter
    def sys_time(self, sys_time):
        """
        Sets the sys_time of this PingResponse.
        Time of notification

        :param sys_time: The sys_time of this PingResponse.
        :type: datetime
        """
        self._sys_time = sys_time

    @property
    def result(self):
        """
        Gets the result of this PingResponse.
        Indicates whether the ping succeeded or not

        :return: The result of this PingResponse.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this PingResponse.
        Indicates whether the ping succeeded or not

        :param result: The result of this PingResponse.
        :type: str
        """
        allowed_values = ["success", "timeout"]
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result`, must be one of {0}"
                .format(allowed_values)
            )
        self._result = result

    @property
    def latency(self):
        """
        Gets the latency of this PingResponse.
        Roundtrip time for the ping (in milliseconds). Available only for a successful ping response

        :return: The latency of this PingResponse.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """
        Sets the latency of this PingResponse.
        Roundtrip time for the ping (in milliseconds). Available only for a successful ping response

        :param latency: The latency of this PingResponse.
        :type: int
        """
        self._latency = latency

    @property
    def hop_count(self):
        """
        Gets the hop_count of this PingResponse.
        Number of hops the ping response took to reach the manager. Available only for a successful ping response.

        :return: The hop_count of this PingResponse.
        :rtype: int
        """
        return self._hop_count

    @hop_count.setter
    def hop_count(self, hop_count):
        """
        Sets the hop_count of this PingResponse.
        Number of hops the ping response took to reach the manager. Available only for a successful ping response.

        :param hop_count: The hop_count of this PingResponse.
        :type: int
        """
        self._hop_count = hop_count

    @property
    def voltage(self):
        """
        Gets the voltage of this PingResponse.
        Voltage reported by the mote (in volts). Available only for a successful ping response.

        :return: The voltage of this PingResponse.
        :rtype: float
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """
        Sets the voltage of this PingResponse.
        Voltage reported by the mote (in volts). Available only for a successful ping response.

        :param voltage: The voltage of this PingResponse.
        :type: float
        """
        self._voltage = voltage

    @property
    def callback_id(self):
        """
        Gets the callback_id of this PingResponse.
        Callback id returned from the ping request

        :return: The callback_id of this PingResponse.
        :rtype: int
        """
        return self._callback_id

    @callback_id.setter
    def callback_id(self, callback_id):
        """
        Sets the callback_id of this PingResponse.
        Callback id returned from the ping request

        :param callback_id: The callback_id of this PingResponse.
        :type: int
        """
        self._callback_id = callback_id

    @property
    def mac_address(self):
        """
        Gets the mac_address of this PingResponse.
        MAC address of the device

        :return: The mac_address of this PingResponse.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this PingResponse.
        MAC address of the device

        :param mac_address: The mac_address of this PingResponse.
        :type: str
        """
        self._mac_address = mac_address

    @property
    def type(self):
        """
        Gets the type of this PingResponse.
        Notification type

        :return: The type of this PingResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PingResponse.
        Notification type

        :param type: The type of this PingResponse.
        :type: str
        """
        allowed_values = ["netStarted", "pathStateChanged", "pathAlert", "moteStateChanged", "joinFailed", "pingResponse", "invalidMIC", "dataPacketReceived", "ipPacketReceived", "packetSent", "cmdFinished", "configChanged", "configLoaded", "alarmOpened", "alarmClosed", "deviceHealthReport", "neighborHealthReport", "discoveryHealthReport", "rawMoteNotification", "serviceChanged", "apStateChanged", "managerStarted", "managerStopping", "optPhase", "pathAlert", "moteTrace", "frameCapacity", "apGpsSyncChanged"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def temperature(self):
        """
        Gets the temperature of this PingResponse.
        Temperature (°C) reported by the mote. Available only for a successful ping response

        :return: The temperature of this PingResponse.
        :rtype: int
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """
        Sets the temperature of this PingResponse.
        Temperature (°C) reported by the mote. Available only for a successful ping response

        :param temperature: The temperature of this PingResponse.
        :type: int
        """
        self._temperature = temperature

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

