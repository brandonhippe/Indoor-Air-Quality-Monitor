# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ServiceChanged(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ServiceChanged - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_time': 'datetime',
            'dest_mac_address': 'str',
            'allocated_pk_period': 'int',
            'source_mac_address': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'sys_time': 'sysTime',
            'dest_mac_address': 'destMacAddress',
            'allocated_pk_period': 'allocatedPkPeriod',
            'source_mac_address': 'sourceMacAddress',
            'type': 'type'
        }

        self._sys_time = None
        self._dest_mac_address = None
        self._allocated_pk_period = None
        self._source_mac_address = None
        self._type = None

    @property
    def sys_time(self):
        """
        Gets the sys_time of this ServiceChanged.
        Time of notification

        :return: The sys_time of this ServiceChanged.
        :rtype: datetime
        """
        return self._sys_time

    @sys_time.setter
    def sys_time(self, sys_time):
        """
        Sets the sys_time of this ServiceChanged.
        Time of notification

        :param sys_time: The sys_time of this ServiceChanged.
        :type: datetime
        """
        self._sys_time = sys_time

    @property
    def dest_mac_address(self):
        """
        Gets the dest_mac_address of this ServiceChanged.
        MAC address of the traffic destination. The Manager is designated as 00-00-00-00-00-00-00-00

        :return: The dest_mac_address of this ServiceChanged.
        :rtype: str
        """
        return self._dest_mac_address

    @dest_mac_address.setter
    def dest_mac_address(self, dest_mac_address):
        """
        Sets the dest_mac_address of this ServiceChanged.
        MAC address of the traffic destination. The Manager is designated as 00-00-00-00-00-00-00-00

        :param dest_mac_address: The dest_mac_address of this ServiceChanged.
        :type: str
        """
        self._dest_mac_address = dest_mac_address

    @property
    def allocated_pk_period(self):
        """
        Gets the allocated_pk_period of this ServiceChanged.
        Allocated inter-packet period.

        :return: The allocated_pk_period of this ServiceChanged.
        :rtype: int
        """
        return self._allocated_pk_period

    @allocated_pk_period.setter
    def allocated_pk_period(self, allocated_pk_period):
        """
        Sets the allocated_pk_period of this ServiceChanged.
        Allocated inter-packet period.

        :param allocated_pk_period: The allocated_pk_period of this ServiceChanged.
        :type: int
        """
        self._allocated_pk_period = allocated_pk_period

    @property
    def source_mac_address(self):
        """
        Gets the source_mac_address of this ServiceChanged.
        MAC address of the traffic origin. The Manager is designated as 00-00-00-00-00-00-00-00

        :return: The source_mac_address of this ServiceChanged.
        :rtype: str
        """
        return self._source_mac_address

    @source_mac_address.setter
    def source_mac_address(self, source_mac_address):
        """
        Sets the source_mac_address of this ServiceChanged.
        MAC address of the traffic origin. The Manager is designated as 00-00-00-00-00-00-00-00

        :param source_mac_address: The source_mac_address of this ServiceChanged.
        :type: str
        """
        self._source_mac_address = source_mac_address

    @property
    def type(self):
        """
        Gets the type of this ServiceChanged.
        Notification type

        :return: The type of this ServiceChanged.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ServiceChanged.
        Notification type

        :param type: The type of this ServiceChanged.
        :type: str
        """
        allowed_values = ["netStarted", "pathStateChanged", "pathAlert", "moteStateChanged", "joinFailed", "pingResponse", "invalidMIC", "dataPacketReceived", "ipPacketReceived", "packetSent", "cmdFinished", "configChanged", "configLoaded", "alarmOpened", "alarmClosed", "deviceHealthReport", "neighborHealthReport", "discoveryHealthReport", "rawMoteNotification", "serviceChanged", "apStateChanged", "managerStarted", "managerStopping", "optPhase", "pathAlert", "moteTrace", "frameCapacity", "apGpsSyncChanged"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

