# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ServiceInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ServiceInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'allocated_pk_period': 'int',
            'estimated_hops': 'int',
            'estimated_latency': 'int',
            'is_sink': 'bool',
            'peer_mac_address': 'str',
            'requested_pk_period': 'int'
        }

        self.attribute_map = {
            'allocated_pk_period': 'allocatedPkPeriod',
            'estimated_hops': 'estimatedHops',
            'estimated_latency': 'estimatedLatency',
            'is_sink': 'isSink',
            'peer_mac_address': 'peerMacAddress',
            'requested_pk_period': 'requestedPkPeriod'
        }

        self._allocated_pk_period = None
        self._estimated_hops = None
        self._estimated_latency = None
        self._is_sink = None
        self._peer_mac_address = None
        self._requested_pk_period = None

    @property
    def allocated_pk_period(self):
        """
        Gets the allocated_pk_period of this ServiceInfo.
        Allocated inter-packet period for this service

        :return: The allocated_pk_period of this ServiceInfo.
        :rtype: int
        """
        return self._allocated_pk_period

    @allocated_pk_period.setter
    def allocated_pk_period(self, allocated_pk_period):
        """
        Sets the allocated_pk_period of this ServiceInfo.
        Allocated inter-packet period for this service

        :param allocated_pk_period: The allocated_pk_period of this ServiceInfo.
        :type: int
        """
        self._allocated_pk_period = allocated_pk_period

    @property
    def estimated_hops(self):
        """
        Gets the estimated_hops of this ServiceInfo.
        Estimated number of hops

        :return: The estimated_hops of this ServiceInfo.
        :rtype: int
        """
        return self._estimated_hops

    @estimated_hops.setter
    def estimated_hops(self, estimated_hops):
        """
        Sets the estimated_hops of this ServiceInfo.
        Estimated number of hops

        :param estimated_hops: The estimated_hops of this ServiceInfo.
        :type: int
        """
        self._estimated_hops = estimated_hops

    @property
    def estimated_latency(self):
        """
        Gets the estimated_latency of this ServiceInfo.
        Estimated latency, in milliseconds

        :return: The estimated_latency of this ServiceInfo.
        :rtype: int
        """
        return self._estimated_latency

    @estimated_latency.setter
    def estimated_latency(self, estimated_latency):
        """
        Sets the estimated_latency of this ServiceInfo.
        Estimated latency, in milliseconds

        :param estimated_latency: The estimated_latency of this ServiceInfo.
        :type: int
        """
        self._estimated_latency = estimated_latency

    @property
    def is_sink(self):
        """
        Gets the is_sink of this ServiceInfo.
        Indicates whether the mote being queried originates the traffic (false) or terminates it (true)

        :return: The is_sink of this ServiceInfo.
        :rtype: bool
        """
        return self._is_sink

    @is_sink.setter
    def is_sink(self, is_sink):
        """
        Sets the is_sink of this ServiceInfo.
        Indicates whether the mote being queried originates the traffic (false) or terminates it (true)

        :param is_sink: The is_sink of this ServiceInfo.
        :type: bool
        """
        self._is_sink = is_sink

    @property
    def peer_mac_address(self):
        """
        Gets the peer_mac_address of this ServiceInfo.
        MAC address of the peer device on the other side of the service. Manager is designated as 00-00-00-00-00-00-00-00

        :return: The peer_mac_address of this ServiceInfo.
        :rtype: str
        """
        return self._peer_mac_address

    @peer_mac_address.setter
    def peer_mac_address(self, peer_mac_address):
        """
        Sets the peer_mac_address of this ServiceInfo.
        MAC address of the peer device on the other side of the service. Manager is designated as 00-00-00-00-00-00-00-00

        :param peer_mac_address: The peer_mac_address of this ServiceInfo.
        :type: str
        """
        self._peer_mac_address = peer_mac_address

    @property
    def requested_pk_period(self):
        """
        Gets the requested_pk_period of this ServiceInfo.
        Requested inter-packet period for this service

        :return: The requested_pk_period of this ServiceInfo.
        :rtype: int
        """
        return self._requested_pk_period

    @requested_pk_period.setter
    def requested_pk_period(self, requested_pk_period):
        """
        Sets the requested_pk_period of this ServiceInfo.
        Requested inter-packet period for this service

        :param requested_pk_period: The requested_pk_period of this ServiceInfo.
        :type: int
        """
        self._requested_pk_period = requested_pk_period

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

